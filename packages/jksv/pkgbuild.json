{
    "package": "jksv",
    "info": {
        "title": "JKSV",
        "author": "J-D-K",
        "category": "tool",
        "version": "09/13/2025",
        "url": "https://github.com/J-D-K/JKSV/releases",
        "license": "GPLv3",
        "description": "Save Manager",
        "details": "If you appreciate the dev's work, please consider supporting development through a donation. Any contribution is appreciated, but never required! Creating and maintaining these tools takes a lot of time and effort. Donation link: https://ko-fi.com/W7W51JF9W6\\n\\nRewritten from the ground up:\\n\\nJKSV's rewrite aims to accomplish the following:\\n\\nClean up and modernize the codebase: The original master branch code became a mess over time and is extremely difficult to navigate and maintain.\\nZero global variables: Everything is encapsulated via interfaces. This alone makes the rewrite easier to work with and much less fragile in comparison to the original.\\nImproved error logging: The master branch did an extremely poor job at logging errors. The rewrite corrects this greatly. Each error is logged with the file, line, and column making errors and bugs easier to track down.\\nDesigned with translations in mind: Unlike the original, translations weren't a feature that were tacked on later. This also made the original difficult to maintain.\\nUse standard formats: JKSV originally used a custom file parser for data files. This has been removed in favor of JSON using libjson-c.\\nUses FsLib instead of fs_dev.c:\\nAll file operations are handled using FsLib. FsLib is a C++ wrapper I wrote around libnx's FS API.\\nFsLib also handles SD card redirection so libraries that depend on C standard I/O can read and write files to and from the SD card.\\nMore convenient Google Drive login.\\nImprove WebDav Support and code.\\nTitle Cache: Titles found on the system are cached the same way JKSM was. This improves boot time greatly on higher Switch firmware versions.\\nThe title cache is also auto-invalidating. No need to manually update it like JKSM on 3DS.\\nProper use of C++ features:\\nPolymorphism and state patterns instead of scattered global variables and logic.\\nSmart pointers to enure no memory leaks can occur.\\nC APIs wrapped in smart pointers and classes to ensure proper cleanup.\\nTemplated task system to reduce code duplication and complexity.\\nSDL textures are all wrapped and managed by a central texture manager.\\nJKSV's rewrite is a ground-up rewrite. It shares none of the original's code at all. Everything has been reworked and rewritten.\\n\\nFeatures:\\n\\nSupports all save data types used on Nintendo Switch:\\nAccount (User)\\nSystem\\nBCAT\\nDevice / Shared\\nTemporary\\nCache\\nSystem BCAT\\nExport Options:\\nStandard, unpacked folders for editors.\\nZIP for better compatibility.\\nNOTE: ZIP is required and enforced for cloud backup!\\nAll At Once:\\nJKSV can backup all the save data on the system or for individual users at once.\\nCloud Support:\\nIf configured, JKSV currently supports:\\nGoogle Drive\\nWebDav\\nJKSV can be configured to upload these automatically.\\nCreate Save Data:\\nJKSV can create save data for any title on your system by itself. No need to start a game to import data for it.\\nJKSV can create save data for every title found on your system at once for a single user.\\nSVI File Support:\\nImport and create save data for titles not installed on your system.\\nNOTE: These are not properly installed to the system. Use at your own discretion!\\nResize save data:\\nJKSV can extend save data to any size you would like. This is useful for games such as Minecraft.\\nCleanup Tools\\nJKSV features functions and tools to make cleanup less of a chore compared to Nintendo's Data Management and confirmation prompts:\\nJust hold A for three seconds to:\\nDelete save data for individual games.\\nDelete all save data for a single user at once.\\nStatistics:\\nView basic data and statistics about the save and title.\\nCustomizable:\\nJKSV features many options to customize it to your liking.\\nSafety:\\nJKSV can require holding to complete destructive operations or be set to make quick automatic backups upon restoring backups."
    },
    "changelog": "v09/13/2025\\nJKSV 09/13/2025\\n\\nThis release addresses the following issues:\\n- A bug in string sanitation logic has been corrected that would result in the final character being replaced with a null terminator.\\n- Non-safe path characters are now ignored instead of replaced with spaces. This prevents duplicate spaces in safe titles and nicknames.\\n    - As a result, some titles may not match their previous output directories. I understand this might be inconvenient, but the change helps keep paths cleaner and more consistent, and it may also improve compatibility with certain WebDAV implementations.\\n\\nWhat's new:\\n- Korean language text has been updated thanks to @DDinghoya!\\n- State transition logic has been consolidated into a single class. \\n\\nI know this may be inconvenient, and I truly appreciate everyone’s patience. I’m doing my best, but I’m only human.- If you notice anything wrong or off at all, don't hesitate to report it.\\n\\nv09/08/2025\\nJKSV 09/08/2025:\\nThis release addresses the following issues with the previous: https://github.com/J-D-K/JKSV/releases/tag/08%2F25%2F2025 release:\\n- Empty directories in ZIP backups are now preserved correctly.\\n- Directory entries in ZIP backups are now handled properly.\\n    - This resolves a bug where ZIPs created by other programs could fail to restore.\\n- Available journaling space is now fetched directly from save data before falling back to default NACP values.\\n- Path sanitation logic has been corrected so Pokémon titles now use the same output path as in the original JKSV.\\n- Addresses a small oversight where icons would fail to shrink back to their original size.\\n\\nWhat's new:\\n- File Mode has been implemented:\\n    - Access it by highlighting a game, pressing X, and choosing Open in File Mode.\\n    - Extra features such as browsing various filesystems on the Switch have been implemented now.\\n    - NOTE: File Mode in the rewrite functions differently from the original JKSV in a few ways. It may take some adjusting.\\n- FsLib has been updated to be fully RAII-compliant.\\n- Various small tweaks and improvements across JKSV and its libraries.\\n\\n Thanks to:\\n@qazrfv1234 for updating the Traditional Chinese translation!\\n\\n Feedback:\\nIf you encounter bugs, issues, or have feature requests, feel free to report them here.\\n\\n Support\\nIf you appreciate my work with JKSV and would like to show support, you can. It's never required, but I do appreciate it! Thank you so much Nick and Impeeza! I really appreciate it!\\n</p>\\n<p align=\"center\">\\n<a href='https://ko-fi.com/W7W51JF9W6' target='_blank'><img height='42' style='border:px;height:42px;' src='https://storage.ko-fi.com/cdn/kofi3.png?v=6' border='0' alt='Support me for the countless hours I poured into JKSV' /></a>\\n</p>\\n\\nJKSV 08/25/2025\\nThis version of JKSV has been rewritten from the ground up. It shares none of original version's code. The goal of this was to make JKSV more stable, navigable, and maintainable.\\n\\nAs mentioned, JKSV has been completely overhauled and rewritten.\\n\\nC++ features: JKSV now makes proper use of polymorphism, RAII, STL containers, and smart pointers throughout.\\nState system: Replaces the old mess of global variables to track state. This alone makes the code far easier to follow and maintain.\\nResource management: No more manual memory management. No more memory leaks.\\nC APIs: All C library APIs are wrapped in classes and smart pointers. This ensures proper cleanup and makes the code easier to work with.\\nError logging: Errors are logged with file, function, and line number, making issues far easier to track down.\\nCode structure and quality: Overall readability and maintainability have been drastically improved.\\nCached boot.\\n\\nFaster startup: JKSV now caches title data to improve boot times. On recent firmwares, Nintendo’s changes have slowed down NsGetApplicationControlData. Caching title information resolves this issue.\\nAutomatic invalidation: JKSV detects and rebuilds the cache itself whenever new titles are detected. Unlike JKSM on 3DS, there’s no need to manually refresh this yourself.\\nRemote storage heavily reworked.\\n\\nSystem overhaul: The entire remote storage system has been reworked from the ground up.\\nExpansion: The new design makes it simpler to add support for additional services in the future.\\nImportant note: Adding support depends on the information a service requires. I’m not handing over all of my personal info just so JKSV can support it.\\nOverhauled WebDav code.\\n\\nCompletely reworked: The WebDav code has been rewritten from the ground up.\\nNamespace agnostic: Instead of slicing and splicing namespaces to find XML tags, the new code ignores them entirely. This eliminates unnecessary string allocations and improves compatibility.\\nRecursive fetching: Your entire WebDav listing is now fetched and processed recursively on boot, rather than on-demand. This eliminates UI pauses when servers respond slowly.\\nConsistency: Changing the output path for a title on your Switch now also updates the folder on your WebDav server automatically. This should have been like this in the first place...\\nInstructions for setting up WebDav can be found here.\\nReworked Google Drive code.\\n\\nMajor cleanup: The Google Drive integration has been heavily reworked, fixing various issues and inconsistencies.\\nFull title support: Folder names once again use full UTF-8 titles. This was changed with the previous WebDav implementation and has been reverted.\\nNew login method: Instead of relying on the Switch’s built-in web browser, JKSV now uses the Limited Input method. You can now log in with your phone or another device instead.\\nInstructions for setting up Google Drive can be found here.\\nReworked file handling logic.\\n\\nComplete overhaul: All file handling logic has been rewritten from the ground up.\\nBug fix: This addresses a rare issue where JKSV could get stuck at the end of a file transfer.\\nReworked UI Code.\\n\\nComplete overhaul: All UI code and elements have been rewritten and fine-tuned.\\nFamiliar Layout: The interface remains familiar, but everything underneath is completely different.\\nBetter translation support: The UI was designed from the ground up with translations in mind. In the original, this was just tacked on later.\\nText Menu (JKSM 2016) Mode Returns: For fans of the original JKSM on 3DS, JKSV now supports JKSM Mode where titles are listed using text menus instead of an icon grid array.\\nAdditions.\\n\\nAuto-Upload: JKSV can now automatically upload backups to your selected service and remove them from the SD card.\\nControllable compression level: You can set the compression level used when creating zipped backups.\\nText Menu (JKSM) mode: Toggle between icon grids and text menus for displaying titles.\\nToggleable System Saves: You can now toggle whether scanning, loading, and display Device, BCAT, Cache, and System is desired. Disabling all of them also improves boot times.\\nJKSV now includes a metadata file in backups containing information about the save. This improves accuracy and reliability when restoring saves.\\nNotes concerning missing features.\\n\\nInclude Device Saves with Users hasn't been implemented yet. It requires some careful consideration and planning.\\nFile Mode is not available yet.\\nFiltering paths from backup and deletion is not yet implemented.\\nAdditional Notes.\\n\\nMost backups from the original JKSV are compatible. Exceptions include titles that extend save data, which are now handled correctly in the rewrite.\\nThe SVI format has been revised. SVI files from the original JKSV are not compatible with this rewrite.\\nThe translations provided are all completed by AI. If you have revisions or would like to fix them, feel free to do so!\\nSome work may still be needed regarding cache type saves and handling them.\\nJKSV's rewrite does not use the same configuration file as the original. You will need to reconfigure it.\\nExtra, extra notes:\\n\\nUses FsLib, a C++ wrapper library I wrote around 3DS and Switch FS calls.\\n\\nMore control: FsLib allows me finer control over file operations.\\nFor example, if the final size of a file is known ahead of time, FsLib can skip redundant calls to extend the file during writes. This speeds up file transfers.\\nPaths are standardized upon construction to ensure compatibility with the Switch's FS.\\nImproved error handling and logging: Every operation returns whether it succeeded. If not, FsLib records an internal error string with the location and error code for easier debugging.\\nBecause of this, the option Use FS Commands Directly has been removed as it serves no purpose anymore.\\nUses SDLLib, a C++ wrapper library I wrote containing reusable functions all of my projects share.\\n\\nCentral Texture Manager: All textures are now loaded, tracked, and freed by a single manager, eliminating duplicate handling.\\nSurfaces & Textures wrapped: SDL Surfaces and Textures are wrapped in smart pointers or classes, ensuring proper cleanup.\\nImproved text handling: Text handling has been reworked and improved compared to the original JKSV implementation.\\nTL;DR\\n\\nThis is effectively a completely different program. It looks like JKSV, runs like JKSV, but it's a completely different beast.\\n\\nSupport\\n\\nI don’t expect it, and it’s absolutely not required, but rewriting JKSV to be the best it can be has, and still is, taking a lot of time and hard work. If you’d like to show your appreciation, you can now, and I truly do appreciate it.\\n\\nURL: https://ko-fi.com/W7W51JF9W6",
    "assets": [
        {
            "url": "https://github.com/J-D-K/JKSV/releases/download/09/13/2025/JKSV.nro",
            "dest": "/switch/JKSV/JKSV.nro",
            "type": "update"
        },
        {
            "type": "icon",
            "url": "icon.png"
        },
        {
            "type": "screenshot",
            "url": "screenshot.png"
        }
    ]
}